- Si no hay ejemplares, los imprimimos.
- el catalogo puede ser siempre el mismo
- si cambia, se crea uno desde 0.
- los carritos hacen la validacion
- test con catalog. should raise, si item no esta en el catalogo error.
- aCart as Bag.
- la herencia es peigrosa dadod que si se redefine la clase padre, afectaria mi implementacion.
- test para revisar que 
- no se puede borrar contenido. No se necesita.
- contents es una copia del bag dentro del cart.
- Se esperaban 5 o 6 tests.
- test Checkout, cashier, carrito vacio.
- test lista de precios
- lista de precios podria ser el catalogo.
- checkout con tarjetaa de credito
- test validacion tarjeta.
- vamos a suponer que siempre se puede hacer el debito.
- Para el jueves se espera tener todo esto resuelto.
- tes de checkout tiene que correr correctamente sin importar el dia (el conflicto esta en no saber si la tarjeta esta vencida). 
- libro de ventas para validar que no se haya hecho la venta si no se hizo el checkout.
- las compras de un usuario podrían ser represetados por un numero.
- chalten para ¿comparar fechas?
- la tarjeta debe saber si esta vencida: isExpiredOn:.
- en constructor de cashier se le debe pasar la fecha de hoy para desacoplarlo del "Date today".
- considerar modelar al cajero como cajero por venta.
- checkout retorna ticket. Podría ser representado por un numero. Por ahora.
- Tests con tarjetas con credito, sin credito, validas , invalidas.
----------------------------------------------------------------------------------------------------------------------------------
Jueves 22/06
- Los tests deben estar en control de todo.
-Simuladores (Test Double)
	- Dummy, Ej: nil
	- Stub, Ej: Merchant Processor
	- Mock, Ej: 
	- Fake, EJ: DB in-memory
- La diff entre Mock y Stub: assert sobre stub son funcionales, asserts sobre mock son implementativos.
- re edificar: bajar a tierra algo que no lo es.

Adaptador para MerchantProcessor
- uno para la cara interna y otro para la cara externa.
- Lo que se esperaba era hacer el de la cara interna.
- se necesita para los tests con la tarjeta.
- debit:from: contador para cada vez que se usa este mensaje.
- Merchant Processor Interface + Merchant Processor Simulator utilizando polimorfismo.
- testear que cashier no hable con MerchantProcessor cuando la tarjeta está vencida
- Simulador puede ser implementado por el mismo test: el test debería poder responder al mensaje debit:from:
- Se podría crear un simulador para cada caso: robada, no tiene credito y "todo bien". Pero se puede generalizar en el modelo mostrado en clase: simulador que se inicializa con un blockClosure.

Interfaz REST de entrada
- createCArtFor: aClient authenticatedWith: aPassword (retorna Id de carrito)
- AddToCart:
- Checkout:
- test sobre interfaz: createCartFor puede ser testeado haciendo listCart con el id de carrito para validar que sea un carrito valido.
- test sobre Id de cliente invalido: checkear que se levante excepcion al tratar de operar.
- test sobre carrito al pasar los 30 min (sin usar delays ni nada parecido).
- Alrededo de 5 o 6 tests para probar interfaz.