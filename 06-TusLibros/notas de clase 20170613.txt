- Si no hay ejemplares, los imprimimos.
- el catalogo puede ser siempre el mismo
- si cambia, se crea uno desde 0.
- los carritos hacen la validacion
- test con catalog. should raise, si item no esta en el catalogo error.
- aCart as Bag.
- la herencia es peigrosa dadod que si se redefine la clase padre, afectaria mi implementacion.
- test para revisar que 
- no se puede borrar contenido. No se necesita.
- contents es una copia del bag dentro del cart.
- Se esperaban 5 o 6 tests.
- test Checkout, cashier, carrito vacio.
- test lista de precios
- lista de precios podria ser el catalogo.
- checkout con tarjetaa de credito
- test validacion tarjeta.
- vamos a suponer que siempre se puede hacer el debito.
- Para el jueves se espera tener todo esto resuelto.
- tes de checkout tiene que correr correctamente sin importar el dia (el conflicto esta en no saber si la tarjeta esta vencida). 
- libro de ventas para validar que no se haya hecho la venta si no se hizo el checkout.
- las compras de un usuario podrían ser represetados por un numero.
- chalten para ¿comparar fechas?
- la tarjeta debe saber si esta vencida: isExpiredOn:.
- en constructor de cashier se le debe pasar la fecha de hoy para desacoplarlo del "Date today".
- considerar modelar al cajero como cajero por venta.
- checkout retorna ticket. Podría ser representado por un numero. Por ahora.
- Tests con tarjetas con credito, sin credito, validas , invalidas.